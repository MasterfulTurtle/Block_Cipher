package hardcodedecrypt;

import java.math.BigInteger;


public class HardcodeDecrypt {

public static void main(String[] args) {
  String encryptedHex = "c195c191be8fa190"; //encrypted hex message
	String key = "10001001"; //initial vector
	String nextKey = "";	//key used for next block
	String messageBin = ""; //original message in binary
	String encryptedBin = ""; //encrypted binary message
  String message = ""; //original message
	
	for(int i = 0; i < encryptedHex.length(); i++)
	{
            char temp = encryptedHex.charAt(i);
            char temp2 = encryptedHex.charAt(i+1);
            String Hex = Character.toString(temp) + Character.toString(temp2);
            System.out.println(Hex);
            i++;
            
            int decimal = Integer.parseInt(Hex, 16);
            String binaryString = Integer.toBinaryString(decimal);
            System.out.println(binaryString);
            
            if(nextKey == "")
            {
                nextKey = key;
            }
            
            int XOR = Integer.parseInt(binaryString,2) ^ Integer.parseInt(nextKey,2);
            String testKey = Integer.toBinaryString(XOR);
            testKey = String.format("%8s", testKey).replace(' ', '0');
            nextKey = binaryString;
            
            int temp3 = Integer.parseInt(testKey,2);
            messageBin = Integer.toHexString(temp3);
            int charValue = Integer.parseInt(messageBin,16);
            char character = (char) charValue;
            message += character;
	} 
        System.out.println(message);     
}
}
